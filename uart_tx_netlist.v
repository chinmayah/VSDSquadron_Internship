/* Generated by Yosys 0.38+54 (git sha1 f8d4d7128, gcc 11.4.0-1ubuntu1~22.04 -fPIC -Os) */

(* top =  1  *)
(* src = "verilog_code:1.1-77.10" *)
module uart_tx(clk, reset, start, data, tx_busy, tx_done, tx);
  (* src = "verilog_code:21.1-75.4" *)
  wire [12:0] _000_;
  (* src = "verilog_code:21.1-75.4" *)
  wire [3:0] _001_;
  (* src = "verilog_code:21.1-75.4" *)
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  (* force_downto = 32'd1 *)
  (* src = "verilog_code:0.0-0.0|verilog_code:30.9-70.16|/usr/local/bin/../share/yosys/techmap.v:575.21-575.22" *)
  wire _108_;
  (* src = "verilog_code:13.12-13.22" *)
  reg [12:0] baud_count;
  (* src = "verilog_code:12.11-12.20" *)
  reg [3:0] bit_count;
  (* src = "verilog_code:2.11-2.14" *)
  input clk;
  wire clk;
  (* src = "verilog_code:5.17-5.21" *)
  input [7:0] data;
  wire [7:0] data;
  (* src = "verilog_code:3.11-3.16" *)
  input reset;
  wire reset;
  (* src = "verilog_code:4.11-4.16" *)
  input start;
  wire start;
  (* src = "verilog_code:8.16-8.18" *)
  output tx;
  reg tx;
  (* src = "verilog_code:6.16-6.23" *)
  output tx_busy;
  reg tx_busy;
  (* src = "verilog_code:14.11-14.22" *)
  reg [7:0] tx_data_reg;
  (* src = "verilog_code:7.16-7.23" *)
  output tx_done;
  reg tx_done;
  (* onehot = 32'd1 *)
  reg [3:0] tx_state;
  assign _027_ = _020_ | _086_;
  assign _028_ = tx_state[1] & ~(_027_);
  assign _008_ = _026_ & ~(_028_);
  assign _029_ = _099_ | _092_;
  assign _011_ = _094_ & ~(_029_);
  assign _000_[0] = _020_ & ~(baud_count[0]);
  assign _030_ = ~(baud_count[1] ^ baud_count[0]);
  assign _000_[1] = _020_ & ~(_030_);
  assign _031_ = baud_count[1] & baud_count[0];
  assign _032_ = ~(_031_ ^ baud_count[2]);
  assign _000_[2] = _020_ & ~(_032_);
  assign _033_ = ~(_031_ & baud_count[2]);
  assign _034_ = _033_ ^ baud_count[3];
  assign _000_[3] = _020_ & ~(_034_);
  assign _035_ = ~(baud_count[3] & baud_count[2]);
  assign _036_ = _031_ & ~(_035_);
  assign _037_ = ~(_036_ ^ baud_count[4]);
  assign _000_[4] = _020_ & ~(_037_);
  assign _038_ = ~(_036_ & baud_count[4]);
  assign _039_ = _038_ ^ baud_count[5];
  assign _000_[5] = _020_ & ~(_039_);
  assign _040_ = ~(baud_count[5] & baud_count[4]);
  assign _041_ = _036_ & ~(_040_);
  assign _042_ = ~(_041_ ^ baud_count[6]);
  assign _000_[6] = _020_ & ~(_042_);
  assign _043_ = ~(_041_ & baud_count[6]);
  assign _044_ = _043_ ^ baud_count[7];
  assign _000_[7] = _020_ & ~(_044_);
  assign _045_ = ~(baud_count[7] & baud_count[6]);
  assign _046_ = _045_ | _040_;
  assign _047_ = _036_ & ~(_046_);
  assign _048_ = ~(_047_ ^ baud_count[8]);
  assign _000_[8] = _020_ & ~(_048_);
  assign _049_ = ~(_047_ & baud_count[8]);
  assign _050_ = _049_ ^ baud_count[9];
  assign _000_[9] = _020_ & ~(_050_);
  assign _051_ = ~(baud_count[9] & baud_count[8]);
  assign _052_ = _051_ | ~(_047_);
  assign _053_ = _052_ ^ baud_count[10];
  assign _000_[10] = _020_ & ~(_053_);
  assign _054_ = _052_ | ~(baud_count[10]);
  assign _055_ = _054_ ^ baud_count[11];
  assign _000_[11] = _020_ & ~(_055_);
  assign _056_ = ~(baud_count[11] & baud_count[10]);
  assign _057_ = _056_ | _051_;
  assign _058_ = _047_ & ~(_057_);
  assign _059_ = _058_ ^ _012_;
  assign _000_[12] = _020_ & ~(_059_);
  assign _001_[0] = tx_state[1] & ~(bit_count[0]);
  assign _060_ = ~(bit_count[1] ^ bit_count[0]);
  assign _001_[1] = tx_state[1] & ~(_060_);
  assign _061_ = ~bit_count[2];
  assign _062_ = _087_ ^ _061_;
  assign _001_[2] = tx_state[1] & ~(_062_);
  assign _063_ = ~(_087_ & bit_count[2]);
  assign _064_ = _063_ ^ bit_count[3];
  assign _001_[3] = tx_state[1] & ~(_064_);
  assign _065_ = bit_count[0] ? tx_data_reg[1] : tx_data_reg[0];
  assign _066_ = bit_count[0] ? tx_data_reg[3] : tx_data_reg[2];
  assign _067_ = bit_count[1] ? _066_ : _065_;
  assign _068_ = bit_count[0] ? tx_data_reg[5] : tx_data_reg[4];
  assign _069_ = bit_count[0] ? tx_data_reg[7] : tx_data_reg[6];
  assign _070_ = bit_count[1] ? _069_ : _068_;
  assign _071_ = bit_count[2] ? _070_ : _067_;
  assign _072_ = _071_ & ~(_023_);
  assign _073_ = _072_ | _094_;
  assign _074_ = _023_ & ~(_094_);
  assign _108_ = _073_ & ~(_074_);
  assign _002_ = ~tx_state[3];
  assign _075_ = ~(baud_count[1] | baud_count[0]);
  assign _076_ = baud_count[3] | baud_count[2];
  assign _077_ = _075_ & ~(_076_);
  assign _078_ = baud_count[5] | baud_count[4];
  assign _079_ = baud_count[7] | baud_count[6];
  assign _080_ = _079_ | _078_;
  assign _081_ = _077_ & ~(_080_);
  assign _082_ = baud_count[9] | baud_count[8];
  assign _083_ = baud_count[11] | baud_count[10];
  assign _084_ = _083_ | _082_;
  assign _085_ = _084_ | baud_count[12];
  assign _086_ = _081_ & ~(_085_);
  assign _087_ = bit_count[1] & bit_count[0];
  assign _088_ = bit_count[3] | ~(bit_count[2]);
  assign _089_ = _087_ & ~(_088_);
  assign _090_ = ~(_089_ & _086_);
  assign _091_ = tx_state[1] & ~(_090_);
  assign _092_ = tx_state[3] & ~(_086_);
  assign _006_ = _092_ | _091_;
  assign _093_ = ~(tx_state[2] | tx_state[1]);
  assign _094_ = tx_state[0] | tx_state[3];
  assign _095_ = _094_ | ~(_093_);
  assign _010_ = _095_ & ~(reset);
  assign _096_ = tx_state[1] | tx_state[0];
  assign _097_ = tx_state[3] ? _086_ : _096_;
  assign _098_ = tx_state[1] & ~(_086_);
  assign _099_ = tx_state[0] & ~(start);
  assign _100_ = _099_ | _098_;
  assign _009_ = _097_ & ~(_100_);
  assign _101_ = _086_ & ~(_002_);
  assign _003_ = _101_ | _099_;
  assign _102_ = start & tx_state[0];
  assign _007_ = _102_ & ~(reset);
  assign _103_ = _089_ | ~(_086_);
  assign _104_ = tx_state[1] & ~(_103_);
  assign _105_ = _104_ | _098_;
  assign _106_ = _086_ & tx_state[2];
  assign _004_ = _106_ | _105_;
  assign _107_ = tx_state[2] & ~(_086_);
  assign _005_ = _107_ | _102_;
  assign _012_ = ~baud_count[12];
  assign _013_ = baud_count[5] | ~(baud_count[4]);
  assign _014_ = _013_ | _079_;
  assign _015_ = _077_ & ~(_014_);
  assign _016_ = _080_ & ~(_015_);
  assign _017_ = _016_ | _084_;
  assign _018_ = _012_ & ~(_017_);
  assign _019_ = _015_ & ~(_085_);
  assign _020_ = _018_ & ~(_019_);
  assign _021_ = ~(_020_ | start);
  assign _022_ = ~(_021_ & tx_state[0]);
  assign _023_ = ~tx_state[1];
  assign _024_ = _020_ | tx_state[0];
  assign _025_ = _023_ & ~(_024_);
  assign _026_ = _022_ & ~(_025_);
  always @(posedge clk, posedge reset)
    if (reset) tx_state[0] <= 1'h1;
    else tx_state[0] <= _003_;
  always @(posedge clk, posedge reset)
    if (reset) tx_state[1] <= 1'h0;
    else tx_state[1] <= _004_;
  always @(posedge clk, posedge reset)
    if (reset) tx_state[2] <= 1'h0;
    else tx_state[2] <= _005_;
  always @(posedge clk, posedge reset)
    if (reset) tx_state[3] <= 1'h0;
    else tx_state[3] <= _006_;
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk)
    if (_007_) tx_data_reg[0] <= data[0];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk)
    if (_007_) tx_data_reg[1] <= data[1];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk)
    if (_007_) tx_data_reg[2] <= data[2];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk)
    if (_007_) tx_data_reg[3] <= data[3];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk)
    if (_007_) tx_data_reg[4] <= data[4];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk)
    if (_007_) tx_data_reg[5] <= data[5];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk)
    if (_007_) tx_data_reg[6] <= data[6];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk)
    if (_007_) tx_data_reg[7] <= data[7];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) tx_busy <= 1'h0;
    else if (_011_) tx_busy <= _002_;
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) tx_done <= 1'h0;
    else if (_011_) tx_done <= tx_state[3];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk)
    if (_010_) tx <= _108_;
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) bit_count[0] <= 1'h0;
    else if (_009_) bit_count[0] <= _001_[0];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) bit_count[1] <= 1'h0;
    else if (_009_) bit_count[1] <= _001_[1];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) bit_count[2] <= 1'h0;
    else if (_009_) bit_count[2] <= _001_[2];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) bit_count[3] <= 1'h0;
    else if (_009_) bit_count[3] <= _001_[3];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_count[0] <= 1'h0;
    else if (_008_) baud_count[0] <= _000_[0];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_count[1] <= 1'h0;
    else if (_008_) baud_count[1] <= _000_[1];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_count[2] <= 1'h0;
    else if (_008_) baud_count[2] <= _000_[2];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_count[3] <= 1'h0;
    else if (_008_) baud_count[3] <= _000_[3];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_count[4] <= 1'h0;
    else if (_008_) baud_count[4] <= _000_[4];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_count[5] <= 1'h0;
    else if (_008_) baud_count[5] <= _000_[5];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_count[6] <= 1'h0;
    else if (_008_) baud_count[6] <= _000_[6];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_count[7] <= 1'h0;
    else if (_008_) baud_count[7] <= _000_[7];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_count[8] <= 1'h0;
    else if (_008_) baud_count[8] <= _000_[8];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_count[9] <= 1'h0;
    else if (_008_) baud_count[9] <= _000_[9];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_count[10] <= 1'h0;
    else if (_008_) baud_count[10] <= _000_[10];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_count[11] <= 1'h0;
    else if (_008_) baud_count[11] <= _000_[11];
  (* src = "verilog_code:21.1-75.4" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_count[12] <= 1'h0;
    else if (_008_) baud_count[12] <= _000_[12];
endmodule
